<?xml version="1.0" encoding="UTF-8"?>
<beans
 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
 xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans">

	<bean id="propertyPlaceholderConfigurer"
	class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
	<value>/WEB-INF/config/jdbc.properties</value>
	</property>
	</bean>
	
 	<bean id="dataSource"
		class="org.apache.ibatis.datasource.pooled.PooledDataSource">
		<property name="driver" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
 
 	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:mybatis/model/modelConfig.xml" />
		<property name="mapperLocations" value="classpath:mybatis/mappers/*.xml" />
	</bean>

	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>

	
	<!-- 스프링에서 제공하는 클래스의 빈을 사용하려면 여전히 XML로 설정해야 한다. 
		그러나 MemberDAO는 개발자가 만든 클래스이므르 XML에서 설정하는 것이 아니라, 
		자바 코드에서 애너테이션으로 설정해야한다. 
		따라서 action-mybatis.xml.에서 MemberDAO 빈 설정 부분을 주석 처리 
	-->
	<!-- MemberDAO는 개발자가 만든 클래스이므로 XML에서 설정하지 않고 자바 코드에서 애너테이션으로 설정 -->
	<!-- 
		<bean id="memberDAO" class="com.spring.member.dao.MemberDAOImpl"> 
			<property name="sqlSession"> 
				<ref bean="sqlSession"/>
			</property> 
		</bean> 
	-->
	<!-- DataSourceTransactionManager클래스를 이용해 dataSource 빈에 트랜잭션을 적용한다. -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource"> 
			<ref bean="dataSource" /> 
		</property>
	</bean>
	
	<!-- 애너테이션을 사용하여 트랜잭션을 적용하기 위해 txManager 빈을 설정 한다. -->
	<tx:annotation-driven
		transaction-manager="txManager" />
</beans>