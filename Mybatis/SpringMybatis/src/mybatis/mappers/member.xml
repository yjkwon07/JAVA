<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- member.xml의 네임스페이스를 지정 -->
<mapper namespace="mapper.member">
	<!-- SQL문을 실행한 후 반환되는 레코드들을 <typeAlias> 태그에서 지정한 memberVO 빈에 저장 -->
	<resultMap id="memResult" type="memberVO">
		<!-- 레코드의 컬럼 이름에 대해 memberVO의 같은 속성에 값을 설정 -->
		<result property="id" column="id" />
		<result property="pwd" column="pwd" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<result property="joinDate" column="joinDate" />
	</resultMap>
	
	<!-- 자바의 HashMap을 이용해 모든 회원을 조회 <resultMap> 태그의 type 속성에는 HashMap이 지정 즉, 
		SQL문 실행 시 레코드의 컬럼 이름을 key로 지정하고, 그 값을 value로 해서 HashMap에 차례대로 저장 -->
	<!-- 조회한 레코드를 지저정한 컬럼 이름을 key, 값을 value로 해서 저장 -->
	<!-- <resultMap id="memResult" type="java.util.HashMap"> 
			<result property="id" column="id" /> 
			<result property="pwd" column="pwd" /> 
			<result property="name" column="name" /> 
			<result property="email" column="email" /> 
			<result property="joinDate" column="joinDate" /> 
		</resultMap> 
	-->
			
	<!-- DAO에 id를 이용해 해당 SQL문을 호출 반환되는 레코드를 memResult에 저장 -->
	<!-- SQL문으의 >, <, <= , <= 같은 연산자들을 XML 파일에서 작성하면 연산자의 아닌 특수 문자로 인식 하므로 오류가 
		발생, 이러한 연산자들도 SQL문의 일부라는 것을 알려주기 위해 <![CDATA[...]]> 태그 안에 작성 -->
	<select id="selectAllMemberList" resultMap="memResult">
      <![CDATA[
         select * from t_member	order by joinDate desc	 	
      ]]>
	</select>

	<!-- MemberDAO에서 접근 시 사용할 SQL문의 id를 지정 resultType 속성을 문자열로 지정해 SQL문으로 조회한 
		이름(문자열)을 호출한 메소드로 반환 -->
	<select id="selectName" resultType="String">
    <![CDATA[
		select name from t_member
			where id = 'hong'			
    ]]>
	</select>

	<!-- MemberDAO에서 접근 시 사용할 SQL문의 id를 지정 resultType 속성을 int로 지정해 SQL문으로 조회한 
		정수를 호출한 메소드로 반환 -->
	<select id="selectPwd" resultType="int">
	  <![CDATA[ 
	    select pwd from t_member 
	    	where id = 'hong'
	 ]]>
	</select>

	<!-- 조건 값으로 조회하는 경우는 브라우저에서 전달 되는 값이 있으므로 <select>태그에 parameterType 속성을 
		전달되는 조건 값의 데이터 타입으로 지정. 
		조건 값이 문자열인 경우는 parameterType 속성을 String으로, 정수인 경우는 int로 설정 -->

	<!-- MemberDAO에서 호출 시 전달된 조건 값은 매개변수 이름으로 SQL문의 조건식에 #{전달된 매개변수 이름} 형식으로 사용. 
		그리고 조회되는 레코드가 한 개인 경우는 resultType속성에 레코드를 저장할 memberVO를 설정 -->

	<!-- MemberDAO 에서 호출하는 id를 지정 
		reusltType : 조회되는 한 개의 레코드를 memberVO에 지정 
		parameterType : MemberDAO에서 SQL문 호출 시 전달되는 매개변수의 데이터 타입을 지정 
		#{} : MemberDAO에서 메소드를 호출하면서 parameterType으로 전달된 매개변수 이름을 
		select문의 id의 조건 값으로 사용 -->
	<select id="selectMemberById" resultType="memberVO"
		parameterType="String">
      <![CDATA[
         select * from t_member
         	where
         	id=#{id}			
      ]]>
	</select>

	<!-- SQL문 실행 시 매개변수 이름을 pwd의 조건 값으로 사용 -->
	<select id="selectMemberByPwd" resultMap="memResult"
		parameterType="int">
      <![CDATA[
         select * from t_member
         	where
         	pwd = #{pwd}			
      ]]>
	</select>

	<!-- insert문은 <insert>태그를 이용해 작성하고 등록할 회원 정보를 memeberVO 빈에 설정한 후 
		<insert> 태그의 parameterType의 memberVO로 전달 values 다음에 #{속성 이름}을 나열하면 
		memberVO빈의 속성 값이 설정 -->

	<!-- MemberDAO에서 회원 정보를 memberVO의 속성에 저장해서 넘긴다. memberVO의 속성이름에 저장된 값을 value로 
		설정 -->
	<insert id="insertMember" parameterType="memberVO">
		<![CDATA[
		 	insert into t_member(id,pwd, name, email)
		 		values(#{id}, #{pwd}, #{name}, #{email})
		]]>
	</insert>

	<!-- insert문의 parameterType을 HashMap으로 지정 
		java.util.Map : MemeberDAO에서 회원 
		정보를 HashMap에 담아서 전달 HashMap에 각각의 key로 저장된 value를 가져와 테이블에 추가 -->
	<insert id="insertMember2" parameterType="java.util.Map">
		<![CDATA[
			 insert into t_member(id,pwd, name, email)
			 	values(#{id}, #{pwd}, #{name}, #{email})
		]]>
	</insert>

	<!-- update문은 <update>태그를 이용해 작성하고, parameterType 속성은 MemberVO에서 메소드를 호출할 때 
		전달될 MemberVO클래스 타입으로 지정. 
		update문에서 수정할 컬럼 값들을 MemberVO속성 이름으로 지정하고, 
		수정할 회원 ID에 해당하는 조건 값도 MemberVO의 id 속성 값으로 지정 -->
	<!-- parameterType : SQL문에 사용할 데이터를 memberVO 빈에 설정해 전달 
		set : memberVO 빈의 속성 값을 각 컬럼의 수정 값으로 설정 -->
	<update id="updateMember" parameterType="memberVO">
     <![CDATA[
	     update t_member
	     	set pwd=#{pwd}, name=#{name}, email=#{email}
	     	where
	     	id=#{id}
      ]]>
	</update>

	<!-- delete문은 <delete>태그를 이용해 작성하며 parameterType속성을 String으로 설정. 
		매개변수 이름 id로 전달된 값을 delete문의 조건 값으로 사용 -->
	<!-- 회원 ID는 문자열이므로 parameterType을 String으로 설정 -->
	<delete id="deleteMember" parameterType="String">
	<![CDATA[
	   delete from  t_member
	   	where
	   	id=#{id}
	]]>
	</delete>

	<!-- select문에 대해 where절을 이용한 조건절을 다음과 같이 추가 
		<if> 태그는 parameterType속성의 memberVO의 
		email 속성으로 전달된 값이 있으면 select문에 이메일 조회 -->
	<!-- 동적 SQL문 -->
	<!-- 
	<select id="searchMember" parameterType="memberVO"
		resultMap="memResult">
      <![CDATA[
          select * from t_member
      ]]>
		<where>
			<if test=" name != ''  and  name != null">
				name=#{name}
			</if>
			<if test="email != ''  and email != null ">
				and email = #{email}
			</if>
		</where>
		order by joinDate desc
	</select>
	-->
	
	<!-- <sql>태그를 이용해 공통 SQL문을 refid를 a로 지정 
		매퍼 파일의 SQL문이 복잡할 때는 공통으로 사용하는 SQL문에 미리 <sql> 태그를 적용한 후 
		다른 SQL문에서 재사용하는 방법이 유용-->
	<sql id="a"> 
		<![CDATA[ select * from t_member ]]>
	</sql>

	<select id="searchMember" parameterType="memberVO"
		resultMap="memResult">
		<!-- <include>태그를 이용해 공통 SQL문을 재사용 -->
		<include refid="a" /> 
		<where>
			<choose>
				<when
					test="name != '' and name != null and email != '' and email != null">
					name=#{name} and email=#{email}
				</when>
				<when test="name != '' and name != null">
					name = #{name}
				</when>
				<when test="email !='' and email != null">
					email = #{email}
				</when>
			</choose>
		</where>
		order by joinDate desc
	</select>

	<!-- parameterType : SQL문에 List 인스턴스나 배열을 전달하면 자동으로 Map에 전달되어 이름을 키로 사용. 
		List 인스턴스는 list를 키로 사용하고 배열은 array를 키로 사용 -->
	<select id="foreachSelect" resultMap="memResult"
		parameterType="java.util.Map">
		<!-- <include>태그를 이용해 공통 SQL문을 재사용 -->
		<include refid="a" /> 
		where name in
		<foreach item="item" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
		order by joinDate desc
	</select>

	<!-- MySQL과 달리 오라클에서는 insert문을 동시에 여러 개 사용하면 오류가 발생 
		따라서, 오라클에서는 <foreach>태그의 open과 close속성에 SQL문을 설정한 후 서브 쿼리 형식으로 
		다중 insert문을 구현. 
		이처럼 <foreach> 태그를 이용하면 여러 정보를 한꺼번에 테이블에 추가 할 수 있다. -->
	<insert id="foreachInsert" parameterType="java.util.Map">
		<!-- <foreach>로 반복 작업을 할 때는 처음에 INSERT ALL을 추가한다. -->
		<foreach item="item" collection="list" open="INSERT ALL"
			separator=" " close="SELECT * FROM DUAL">
			<!-- <foreach>로 반복 작업이 끝난 후 SELECT * FROM DUAL을 마지막에 추가 -->
			INTO t_member(id, pwd, name, email)
			VALUES (#{item.id},
					#{item.pwd},
					#{item.name},
					#{item.email})
		</foreach>
	</insert>

	<!-- 마이바티스에서 오라클의 like를 검색할 때는 '%'기호와 조건 값 사이에 반드시 || 기호를 사용해서
		연결해주어야 한다. -->
	<!--  ERROR -->
	<!--  
	<select id="selectLike" resultMap="memResult" 
		parameterType="String"> 
		<![CDATA[ select * from t_member 
			where 
			name like '%'#{name}'%' 
		]]> 
	</select>
	--> 
	
	<!-- like 검색 -->
	<!-- #{name}앞에는 '%' ||를 붙인다. 그리고 뒤에는 || '%'를 붙인다. -->
	<select id="selectLike" resultMap="memResult"
		parameterType="String">
      <![CDATA[
         select * from t_member
         where
         name like '%' || #{name} || '%'		
      ]]>
	</select>
</mapper>